// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (PUT /example/employee)
	CreateEmployee(ctx echo.Context) error

	// (GET /example/employee/all)
	GetAllEmployees(ctx echo.Context) error

	// (GET /example/hello)
	Greet(ctx echo.Context) error

	// (DELETE /exmaple/employee/{id})
	DeleteEmployee(ctx echo.Context, id int64) error

	// (GET /exmaple/employee/{id})
	FindEmployeeByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEmployee(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateEmployee(ctx)
	return err
}

// GetAllEmployees converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllEmployees(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllEmployees(ctx)
	return err
}

// Greet converts echo context to params.
func (w *ServerInterfaceWrapper) Greet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Greet(ctx)
	return err
}

// DeleteEmployee converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEmployee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEmployee(ctx, id)
	return err
}

// FindEmployeeByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindEmployeeByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindEmployeeByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/example/employee", wrapper.CreateEmployee)
	router.GET(baseURL+"/example/employee/all", wrapper.GetAllEmployees)
	router.GET(baseURL+"/example/hello", wrapper.Greet)
	router.DELETE(baseURL+"/exmaple/employee/:id", wrapper.DeleteEmployee)
	router.GET(baseURL+"/exmaple/employee/:id", wrapper.FindEmployeeByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTY/bNhD9KwTboyK5m6AHnbpZu4WBIAmS9pTuYSKNJQYUyXJG6zUM/feClCXLK2Hd",
	"Aos2F0Mi5+u9NzPyURa2cdagYZL5UVJRYwPxcdM4bQ+I4Rm0/rCT+Zej/NHjTubyh+zsl52csve4H526",
	"5Cidtw49K4zxVBl+d9Y3wDKXyvDPb2Qi+eCwf8UKvey6RHr8q1UeS5l/CV73o5H9+g0Llt19l4zlvVPE",
	"MTxjE/M8V+GkvCEmeA+H8L7x3voQ4LLswpb4tPDXNwuFJ7JBIqii9emS2CtTzUDFmGf7OcBETrmc16T4",
	"sJAlkQaaf5A+WiV9lHnuYK3MzvbgDUMR+cUGlJa5dBo4cPFK/7IDU9omLWwjh9Ty4+la/I4QjlsfnGpm",
	"R3mW7ff7dOLVJbJEKrxyrKyRubwVBI3TKG4/bgXXwEJp3RJ7YCRBKt7dffpjLQIdELxIWCMGqkgmUqsC",
	"DUUaTjXdOihqFDfparEgiNep9VV28qXs3fZu8/7z5tVNukprbnRsGPQNfdh9Rv+gCjwFybOM9lBV6FNl",
	"s2iSheZQrIPJ5rHHMzgl8gE99WB/SlfpKgS2Dg04JXP5Oh4l0gHXUekM+wAZTpuhjYpcUnfnMZJkcC9G",
	"4xi752lbjkab83VoCyR+a8vDoDeaGB2c06qIrtk3CimG7XBtyC7WQDfTeLgTbAWUpZz2JvsWY7OSs0GH",
	"kOpmdTNHOyAUg2nfSztoNb8YkH4jLEBoDT46LBhLgYNNl8zFykDrkKTCBcE+IbfekACtR8FIEFuPpVBG",
	"cI2CDsTYpH+amZK/Id9qPe37J6StXo6G6aZdYGPUQiviiSCXnNSotb1KBjUqjEvlEVmZSgAJMGPMRSKC",
	"6XX4jI+cOQ3qCfCnm3KGLpaygKqBC6WPqux6WBoZ5wD7cxIgSJlK4yi5+AqEZVhiQfDtWlAblMJyhnQd",
	"Q0yG14GHBhk9xU/zZcLtWtjdOQtbcSotbPewx4Hr89pW8zlMJixd/2rfzxR488zU9qWU//vQJldG0yzI",
	"NCq4Xc8k+lWZchDo7SEa/EuRdshF/Z9p9PJL4tkF8f0s6y6RhP5hUOX5fyn33d8BAAD//yHb36onCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
