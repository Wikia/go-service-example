// Code generated by counterfeiter. DO NOT EDIT.
package modelsfakes

import (
	"context"
	"sync"

	"github.com/Wikia/go-example-service/cmd/models"
)

type FakeRepository struct {
	AddEmployeeStub        func(context.Context, *models.EmployeeDbModel) error
	addEmployeeMutex       sync.RWMutex
	addEmployeeArgsForCall []struct {
		arg1 context.Context
		arg2 *models.EmployeeDbModel
	}
	addEmployeeReturns struct {
		result1 error
	}
	addEmployeeReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteEmployeeStub        func(context.Context, int64) error
	deleteEmployeeMutex       sync.RWMutex
	deleteEmployeeArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	deleteEmployeeReturns struct {
		result1 error
	}
	deleteEmployeeReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllEmployeesStub        func(context.Context) ([]models.EmployeeDbModel, error)
	getAllEmployeesMutex       sync.RWMutex
	getAllEmployeesArgsForCall []struct {
		arg1 context.Context
	}
	getAllEmployeesReturns struct {
		result1 []models.EmployeeDbModel
		result2 error
	}
	getAllEmployeesReturnsOnCall map[int]struct {
		result1 []models.EmployeeDbModel
		result2 error
	}
	GetEmployeeStub        func(context.Context, int64) (*models.EmployeeDbModel, error)
	getEmployeeMutex       sync.RWMutex
	getEmployeeArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getEmployeeReturns struct {
		result1 *models.EmployeeDbModel
		result2 error
	}
	getEmployeeReturnsOnCall map[int]struct {
		result1 *models.EmployeeDbModel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) AddEmployee(arg1 context.Context, arg2 *models.EmployeeDbModel) error {
	fake.addEmployeeMutex.Lock()
	ret, specificReturn := fake.addEmployeeReturnsOnCall[len(fake.addEmployeeArgsForCall)]
	fake.addEmployeeArgsForCall = append(fake.addEmployeeArgsForCall, struct {
		arg1 context.Context
		arg2 *models.EmployeeDbModel
	}{arg1, arg2})
	stub := fake.AddEmployeeStub
	fakeReturns := fake.addEmployeeReturns
	fake.recordInvocation("AddEmployee", []interface{}{arg1, arg2})
	fake.addEmployeeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) AddEmployeeCallCount() int {
	fake.addEmployeeMutex.RLock()
	defer fake.addEmployeeMutex.RUnlock()
	return len(fake.addEmployeeArgsForCall)
}

func (fake *FakeRepository) AddEmployeeCalls(stub func(context.Context, *models.EmployeeDbModel) error) {
	fake.addEmployeeMutex.Lock()
	defer fake.addEmployeeMutex.Unlock()
	fake.AddEmployeeStub = stub
}

func (fake *FakeRepository) AddEmployeeArgsForCall(i int) (context.Context, *models.EmployeeDbModel) {
	fake.addEmployeeMutex.RLock()
	defer fake.addEmployeeMutex.RUnlock()
	argsForCall := fake.addEmployeeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) AddEmployeeReturns(result1 error) {
	fake.addEmployeeMutex.Lock()
	defer fake.addEmployeeMutex.Unlock()
	fake.AddEmployeeStub = nil
	fake.addEmployeeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) AddEmployeeReturnsOnCall(i int, result1 error) {
	fake.addEmployeeMutex.Lock()
	defer fake.addEmployeeMutex.Unlock()
	fake.AddEmployeeStub = nil
	if fake.addEmployeeReturnsOnCall == nil {
		fake.addEmployeeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addEmployeeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteEmployee(arg1 context.Context, arg2 int64) error {
	fake.deleteEmployeeMutex.Lock()
	ret, specificReturn := fake.deleteEmployeeReturnsOnCall[len(fake.deleteEmployeeArgsForCall)]
	fake.deleteEmployeeArgsForCall = append(fake.deleteEmployeeArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.DeleteEmployeeStub
	fakeReturns := fake.deleteEmployeeReturns
	fake.recordInvocation("DeleteEmployee", []interface{}{arg1, arg2})
	fake.deleteEmployeeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) DeleteEmployeeCallCount() int {
	fake.deleteEmployeeMutex.RLock()
	defer fake.deleteEmployeeMutex.RUnlock()
	return len(fake.deleteEmployeeArgsForCall)
}

func (fake *FakeRepository) DeleteEmployeeCalls(stub func(context.Context, int64) error) {
	fake.deleteEmployeeMutex.Lock()
	defer fake.deleteEmployeeMutex.Unlock()
	fake.DeleteEmployeeStub = stub
}

func (fake *FakeRepository) DeleteEmployeeArgsForCall(i int) (context.Context, int64) {
	fake.deleteEmployeeMutex.RLock()
	defer fake.deleteEmployeeMutex.RUnlock()
	argsForCall := fake.deleteEmployeeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) DeleteEmployeeReturns(result1 error) {
	fake.deleteEmployeeMutex.Lock()
	defer fake.deleteEmployeeMutex.Unlock()
	fake.DeleteEmployeeStub = nil
	fake.deleteEmployeeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteEmployeeReturnsOnCall(i int, result1 error) {
	fake.deleteEmployeeMutex.Lock()
	defer fake.deleteEmployeeMutex.Unlock()
	fake.DeleteEmployeeStub = nil
	if fake.deleteEmployeeReturnsOnCall == nil {
		fake.deleteEmployeeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteEmployeeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) GetAllEmployees(arg1 context.Context) ([]models.EmployeeDbModel, error) {
	fake.getAllEmployeesMutex.Lock()
	ret, specificReturn := fake.getAllEmployeesReturnsOnCall[len(fake.getAllEmployeesArgsForCall)]
	fake.getAllEmployeesArgsForCall = append(fake.getAllEmployeesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllEmployeesStub
	fakeReturns := fake.getAllEmployeesReturns
	fake.recordInvocation("GetAllEmployees", []interface{}{arg1})
	fake.getAllEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetAllEmployeesCallCount() int {
	fake.getAllEmployeesMutex.RLock()
	defer fake.getAllEmployeesMutex.RUnlock()
	return len(fake.getAllEmployeesArgsForCall)
}

func (fake *FakeRepository) GetAllEmployeesCalls(stub func(context.Context) ([]models.EmployeeDbModel, error)) {
	fake.getAllEmployeesMutex.Lock()
	defer fake.getAllEmployeesMutex.Unlock()
	fake.GetAllEmployeesStub = stub
}

func (fake *FakeRepository) GetAllEmployeesArgsForCall(i int) context.Context {
	fake.getAllEmployeesMutex.RLock()
	defer fake.getAllEmployeesMutex.RUnlock()
	argsForCall := fake.getAllEmployeesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) GetAllEmployeesReturns(result1 []models.EmployeeDbModel, result2 error) {
	fake.getAllEmployeesMutex.Lock()
	defer fake.getAllEmployeesMutex.Unlock()
	fake.GetAllEmployeesStub = nil
	fake.getAllEmployeesReturns = struct {
		result1 []models.EmployeeDbModel
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetAllEmployeesReturnsOnCall(i int, result1 []models.EmployeeDbModel, result2 error) {
	fake.getAllEmployeesMutex.Lock()
	defer fake.getAllEmployeesMutex.Unlock()
	fake.GetAllEmployeesStub = nil
	if fake.getAllEmployeesReturnsOnCall == nil {
		fake.getAllEmployeesReturnsOnCall = make(map[int]struct {
			result1 []models.EmployeeDbModel
			result2 error
		})
	}
	fake.getAllEmployeesReturnsOnCall[i] = struct {
		result1 []models.EmployeeDbModel
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetEmployee(arg1 context.Context, arg2 int64) (*models.EmployeeDbModel, error) {
	fake.getEmployeeMutex.Lock()
	ret, specificReturn := fake.getEmployeeReturnsOnCall[len(fake.getEmployeeArgsForCall)]
	fake.getEmployeeArgsForCall = append(fake.getEmployeeArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetEmployeeStub
	fakeReturns := fake.getEmployeeReturns
	fake.recordInvocation("GetEmployee", []interface{}{arg1, arg2})
	fake.getEmployeeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetEmployeeCallCount() int {
	fake.getEmployeeMutex.RLock()
	defer fake.getEmployeeMutex.RUnlock()
	return len(fake.getEmployeeArgsForCall)
}

func (fake *FakeRepository) GetEmployeeCalls(stub func(context.Context, int64) (*models.EmployeeDbModel, error)) {
	fake.getEmployeeMutex.Lock()
	defer fake.getEmployeeMutex.Unlock()
	fake.GetEmployeeStub = stub
}

func (fake *FakeRepository) GetEmployeeArgsForCall(i int) (context.Context, int64) {
	fake.getEmployeeMutex.RLock()
	defer fake.getEmployeeMutex.RUnlock()
	argsForCall := fake.getEmployeeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) GetEmployeeReturns(result1 *models.EmployeeDbModel, result2 error) {
	fake.getEmployeeMutex.Lock()
	defer fake.getEmployeeMutex.Unlock()
	fake.GetEmployeeStub = nil
	fake.getEmployeeReturns = struct {
		result1 *models.EmployeeDbModel
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetEmployeeReturnsOnCall(i int, result1 *models.EmployeeDbModel, result2 error) {
	fake.getEmployeeMutex.Lock()
	defer fake.getEmployeeMutex.Unlock()
	fake.GetEmployeeStub = nil
	if fake.getEmployeeReturnsOnCall == nil {
		fake.getEmployeeReturnsOnCall = make(map[int]struct {
			result1 *models.EmployeeDbModel
			result2 error
		})
	}
	fake.getEmployeeReturnsOnCall[i] = struct {
		result1 *models.EmployeeDbModel
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addEmployeeMutex.RLock()
	defer fake.addEmployeeMutex.RUnlock()
	fake.deleteEmployeeMutex.RLock()
	defer fake.deleteEmployeeMutex.RUnlock()
	fake.getAllEmployeesMutex.RLock()
	defer fake.getAllEmployeesMutex.RUnlock()
	fake.getEmployeeMutex.RLock()
	defer fake.getEmployeeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.Repository = new(FakeRepository)
